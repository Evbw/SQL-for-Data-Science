Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

/****************
I checked the total number of records based on the table names individually. For example:

SELECT *
FROM attribute

Another option is

SELECT COUNT(*)
FROM attribute

which will return just the number. This would be useful if you don't have an output telling you exactly how many rows there are.
****************/
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

/****************
I used the DISTINCT statement and checked the total number of records based on the table names individually. For example:

SELECT DISTINCT(ID)
FROM business

You can also use 

SELECT COUNT(DISTINCT(ID))
FROM business
****************/

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review - ID = 10000, business_id = 8090, user_id = 9581
vi. Checkin = 493
vii. Photo - ID = 10000, business_id = 6493
viii. Tip - user_id = 537, business_id = 3979
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: "no."
	
	
	SQL code used to arrive at answer:
	
/****************
I once again brute forced it because I found it easier to copy and paste the individual column names rather than have list of OR statements to encompass all possibilities.

SELECT *
FROM User
WHERE id IS NULL
****************/
	
	SELECT *
	FROM User
	WHERE id IS NULL
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

/****************
I used the MIN, MAX, and AVG functions on the appropriate columns. For example:

SELECT MAX(stars)
FROM review
****************/

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5	 	avg: 3.6549 
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414 
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:


	SQL code used to arrive at answer:

/****************
I needed to see the city names, so I selected city, and then SUMmed the reviews. I needed them grouped by the city, then ordered based on reviews, descending.
	
	SELECT city
        ,SUM(review_count) as ReviewCount
	FROM Business
	GROUP BY city
	ORDER BY ReviewCount DESC
****************/
	
	
	Copy and Paste the Result Below:
	
	+-----------------+-------------+
	| city            | ReviewCount |
	+-----------------+-------------+
	| Las Vegas       |       82854 |
	| Phoenix         |       34503 |
	| Toronto         |       24113 |
	| Scottsdale      |       20614 |
	| Charlotte       |       12523 |
	| Henderson       |       10871 |
	| Tempe           |       10504 |
	| Pittsburgh      |        9798 |
	| Montréal        |        9448 |
	| Chandler        |        8112 |
	| Mesa            |        6875 |
	| Gilbert         |        6380 |
	| Cleveland       |        5593 |
	| Madison         |        5265 |
	| Glendale        |        4406 |
	| Mississauga     |        3814 |
	| Edinburgh       |        2792 |
	| Peoria          |        2624 |
	| North Las Vegas |        2438 |
	| Markham         |        2352 |
	| Champaign       |        2029 |
	| Stuttgart       |        1849 |
	| Surprise        |        1520 |
	| Lakewood        |        1465 |
	| Goodyear        |        1155 |
	+-----------------+-------------+
	(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

/****************
There are "stars" which they requested as "star rating" and "review_count" as count, so I added those and once again SUMmed review_count.

	SELECT stars as "star rating"
		,SUM(review_count) as count
	FROM Business
	Where City = 'Avon'
	Group by stars
****************/


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

	+-------------+-------+
	| star rating | count |
	+-------------+-------+
	|         1.5 |    10 |
	|         2.5 |     6 |
	|         3.5 |    88 |
	|         4.0 |    21 |
	|         4.5 |    31 |
	|         5.0 |     3 |
	+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

	SELECT stars as "star rating"
		,SUM(review_count) as count
	FROM Business
	Where City = 'Beachwood'
	Group by stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

	+-------------+-------+
	| star rating | count |
	+-------------+-------+
	|         2.0 |     8 |
	|         2.5 |     3 |
	|         3.0 |    11 |
	|         3.5 |     6 |
	|         4.0 |    69 |
	|         4.5 |    17 |
	|         5.0 |    23 |
	+-------------+-------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
/****************
I chose name, because ID was an inscrutable mess and needed to SUM the review_count. I had to group by ID,
because there are multiple similar names in the data, so it was counting different "Nicoles" and adding their reviews together.
Then I limited the number of results to those I was interested in.

	SELECT name
		,SUM(review_count) as Reviewcount
	FROM user
	GROUP BY id
	ORDER BY ReviewCount DESC
	LIMIT 3
****************/	
		
	Copy and Paste the Result Below:
		
	+--------+-------------+
	| name   | Reviewcount |
	+--------+-------------+
	| Gerald |        2000 |
	| Sara   |        1629 |
	| Yuri   |        1339 |
	+--------+-------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	I would say yes, weakly. We can see some of those that review the most are near the top:
	
	SELECT name
		,SUM(review_count) as Reviewcount
		,SUM(fans) as Fancount
	FROM user
	GROUP BY id
	ORDER BY Fancount DESC
	
	+-----------+-------------+----------+
	| name      | Reviewcount | Fancount |
	+-----------+-------------+----------+
	| Amy       |         609 |      503 |
	| Mimi      |         968 |      497 |
	| Harald    |        1153 |      311 |
	| Gerald    |        2000 |      253 |
	| Christine |         930 |      173 |
	| Lisa      |         813 |      159 |
	| Cat       |         377 |      133 |
	| William   |        1215 |      126 |
	| Fran      |         862 |      124 |
	| Lissa     |         834 |      120 |
	| Mark      |         861 |      115 |
	| Tiffany   |         408 |      111 |
	| bernice   |         255 |      105 |
	| Roanna    |        1039 |      104 |
	| Angela    |         694 |      101 |
	| .Hon      |        1246 |      101 |
	| Ben       |         307 |       96 |
	| Linda     |         584 |       89 |
	| Christina |         842 |       85 |
	| Jessica   |         220 |       84 |
	| Greg      |         408 |       81 |
	| Nieves    |         178 |       80 |
	| Sui       |         754 |       78 |
	| Yuri      |        1339 |       76 |
	| Nicole    |         161 |       73 |
	+-----------+-------------+----------+
	
	Whereas those with fewer reviews are near the bottom:
	
	SELECT name
		,SUM(review_count) as Reviewcount
		,SUM(fans) as Fancount
	FROM user
	GROUP BY id
	ORDER BY Fancount ASC
	
	+---------+-------------+----------+
	| name    | Reviewcount | Fancount |
	+---------+-------------+----------+
	| Joe     |           2 |        0 |
	| Rae     |           2 |        0 |
	| Jeb     |          57 |        0 |
	| Jed     |           8 |        0 |
	| Ryan    |           2 |        0 |
	| Scott   |           7 |        0 |
	| Joe     |           1 |        0 |
	| John    |           3 |        0 |
	| Ron     |           9 |        0 |
	| Bryan   |           5 |        0 |
	| Patti   |           2 |        0 |
	| Kristin |          28 |        0 |
	| Gary    |          23 |        0 |
	| Cynthia |           4 |        0 |
	| Mrme    |           2 |        0 |
	| Austin  |           2 |        0 |
	| Mesut   |          25 |        0 |
	| Lissa   |           3 |        0 |
	| Tara    |           3 |        0 |
	| Lyndsey |           1 |        0 |
	| Alex    |           7 |        0 |
	| Annie   |          11 |        0 |
	| Daniece |           2 |        0 |
	| Mary    |           2 |        0 |
	| Sachin  |           1 |        0 |
	+---------+-------------+----------+															
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word "love"

	
	SQL code used to arrive at answer:
	
/***********
I had to use COUNT this time to make it readable, then used the wildcard to ignore all other text
	
	SELECT COUNT(text) as "love"
	FROM review
	Where text LIKE "%love%"
	
	+------+
	| love |
	+------+
	| 1780 |
	+------+
	
	SELECT COUNT(text) as "hate"
	FROM review
	Where text LIKE "%hate%"
	
	+------+
	| hate |
	+------+
	|  232 |
	+------+

**************/
	
10. Find the top 10 users with the most fans:

/***********
I reused the code for the correlation of reviews to fans, since it already had the fan count. Delete the SUM of reviews, and LIMITed to 10.

	SQL code used to arrive at answer:
	
	SELECT name
		,SUM(fans) as Fancount
	FROM user
	GROUP BY id
	ORDER BY Fancount DESC
	LIMIT 10
*************/	
	
	Copy and Paste the Result Below:

	+-----------+----------+
	| name      | Fancount |
	+-----------+----------+
	| Amy       |      503 |
	| Mimi      |      497 |
	| Harald    |      311 |
	| Gerald    |      253 |
	| Christine |      173 |
	| Lisa      |      159 |
	| Cat       |      133 |
	| William   |      126 |
	| Fran      |      124 |
	| Lissa     |      120 |
	+-----------+----------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating.
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

	Yes, I looked at a few categories and the shorter hours tended to have higher reviews.

ii. Do the two groups you chose to analyze have a different number of reviews?

    Yes, the higher-rated businesses tend to have more reviews as well.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	No, some of the neighborhood info is missing and I'm only getting two results. It's hard to work with.

SQL code used for analysis:

    SELECT B.name
		,B.review_count
		,H.hours
		,neighborhood
		,C.category,
		CASE
			WHEN hours LIKE "%monday%" THEN 1
			WHEN hours LIKE "%tuesday%" THEN 2
			WHEN hours LIKE "%wednesday%" THEN 3
			WHEN hours LIKE "%thursday%" THEN 4
			WHEN hours LIKE "%friday%" THEN 5
			WHEN hours LIKE "%saturday%" THEN 6
			WHEN hours LIKE "%sunday%" THEN 7
		END AS hop,
		CASE
			WHEN B.stars BETWEEN 2 AND 3 THEN '2-3 stars'
			WHEN B.stars BETWEEN 4 AND 5 THEN '4-5 stars'
		END AS star_rating
	FROM Business B
	INNER JOIN Hours H
	ON B.id = H.business_id
	INNER JOIN category C
	ON B.id = C.business_id
	WHERE (B.city = "Las Vegas" AND C.category LIKE "Restaurants") AND (B.stars BETWEEN 2 AND 3 OR B.stars BETWEEN 4 AND 5)
	GROUP BY stars,hop
    ORDER BY star_rating, hop DESC
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones
that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
    
	The one that is open has more reviews...
         
ii. Difference 2:
         
    ...and fewer stars.
         
SQL code used for analysis:

	SELECT name
		,stars
		,review_count
		,is_open
	FROM Business
	GROUP By is_open
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them,
predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel
free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
	I chose to see if businesses with many attributes were lower rated than businesses with fewer attributes.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
    I will need the names, the ratings, a review count will be helpful as well to weed out any outliers, then a count of the total number of attributes.
	
iii. Output of your finished dataset:

	+----------------------------------------+-------+--------------+----------------+
	| Businessname                           | stars | review_count | Attributetotal |
	+----------------------------------------+-------+--------------+----------------+
	| Bootleggers Modern American Smokehouse |   4.0 |          431 |             27 |
	| Gallagher's                            |   3.0 |           60 |             25 |
	| Big Smoke Burger                       |   3.0 |           47 |             21 |
	| Senor Taco                             |   3.5 |           83 |             21 |
	| Subway                                 |   3.5 |            3 |             21 |
	| Thirsty Goat                           |   3.5 |           74 |             21 |
	| Five Guys                              |   3.5 |           63 |             20 |
	| Hermanos Mexican Grill                 |   4.0 |           69 |             20 |
	| Mad Mex - South Hills                  |   3.0 |          103 |             20 |
	| McDonald's                             |   2.0 |            8 |             20 |
	| The Cider Mill                         |   4.0 |           91 |             20 |
	| Wingstop                               |   3.0 |          123 |             20 |
	| Charlie D's Catfish & Chicken          |   4.5 |            7 |             19 |
	| Edulis                                 |   4.0 |           89 |             19 |
	| Hi Scores - Blue Diamond               |   3.5 |          105 |             19 |
	| Mango Flats                            |   2.5 |            5 |             19 |
	| Papa Da Vinci                          |   2.5 |           28 |             19 |
	| Pizzaiolo                              |   3.0 |           34 |             19 |
	| Flaming Kitchen                        |   3.0 |           25 |             18 |
	| Masamune Japanese Restaurant           |   4.0 |           61 |             18 |
	| Otto Onkel                             |   3.0 |           50 |             18 |
	| P & J Hamburgers Inn                   |   3.0 |            3 |             18 |
	| The Fox & Fiddle                       |   2.5 |           35 |             17 |
	| Nabers Music, Bar & Eats               |   4.0 |           75 |             16 |
	| The Charlotte Room                     |   3.5 |           10 |             16 |
	+----------------------------------------+-------+--------------+----------------+
         
         
iv. Provide the SQL code you used to create your final dataset:

	SELECT B.name AS Businessname
		,B.stars
		,B.review_count
		,COUNT(A.name) AS Attributetotal
	FROM Business B
	INNER JOIN attribute A
	ON B.id = A.business_id
    GROUP BY B.name
    ORDER BY Attributetotal DESC